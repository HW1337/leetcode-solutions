var calcEquation = function(equations, values, queries) {
    const graph = {};
    
    for (let i = 0; i < equations.length; i++) {
        const [A, B] = equations[i];
        const val = values[i];
        
        if (!graph[A]) graph[A] = {};
        if (!graph[B]) graph[B] = {};
        
        graph[A][B] = val;
        graph[B][A] = 1 / val;
    }
    
    const dfs = (start, end, visited) => {
        if (!graph[start] || !graph[end]) return -1.0;
        if (start === end) return 1.0;
        
        visited.add(start);
        
        for (const neighbor in graph[start]) {
            if (visited.has(neighbor)) continue;
            const result = dfs(neighbor, end, visited);
            if (result !== -1.0) return result * graph[start][neighbor];
        }
        
        return -1.0;
    };
    
    const results = [];
    for (const [C, D] of queries) {
        results.push(dfs(C, D, new Set()));
    }
    
    return results;
};
