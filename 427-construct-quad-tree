/**
 * // Definition for a QuadTree node.
 * function Node(val,isLeaf,topLeft,topRight,bottomLeft,bottomRight) {
 *    this.val = val;
 *    this.isLeaf = isLeaf;
 *    this.topLeft = topLeft;
 *    this.topRight = topRight;
 *    this.bottomLeft = bottomLeft;
 *    this.bottomRight = bottomRight;
 * };
 */

/**
 * @param {number[][]} grid
 * @return {Node}
 */
var construct = function(grid) {
    const isUniform = (grid, x1, y1, x2, y2) => {
        const val = grid[x1][y1];
        for (let i = x1; i < x2; i++) {
            for (let j = y1; j < y2; j++) {
                if (grid[i][j] !== val) return false;
            }
        }
        return true;
    };

    const build = (grid, x1, y1, x2, y2) => {
        if (isUniform(grid, x1, y1, x2, y2)) {
            return new Node(grid[x1][y1] === 1, true, null, null, null, null);
        }

        const midX = Math.floor((x1 + x2) / 2);
        const midY = Math.floor((y1 + y2) / 2);

        return new Node(
            true,
            false,
            build(grid, x1, y1, midX, midY),
            build(grid, x1, midY, midX, y2),
            build(grid, midX, y1, x2, midY),
            build(grid, midX, midY, x2, y2)
        );
    };

    return build(grid, 0, 0, grid.length, grid.length);
};
