/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 */
class BSTIterator {
    constructor(root) {
        this.generator = this.inOrderTraversal(root);
        this.current = this.generator.next();
    }

    *inOrderTraversal(node) {
        const stack = [];
        while (node || stack.length) {
            while (node) {
                stack.push(node);
                node = node.left;
            }
            node = stack.pop();
            yield node.val;
            node = node.right;
        }
    }

    /**
     * @return the next smallest number
     * @return {number}
     */
    next() {
        const value = this.current.value;
        this.current = this.generator.next();
        return value;
    }

    /**
     * @return whether we have a next smallest number
     * @return {boolean}
     */
    hasNext() {
        return !this.current.done;
    }
}

/** 
 * Your BSTIterator object will be instantiated and called as such:
 * var obj = new BSTIterator(root)
 * var param_1 = obj.next()
 * var param_2 = obj.hasNext()
 */
