/**
 * @param {number[][]} matrix
 */
var NumMatrix = function(matrix) {
    this.dp = [];
    for (let i = 0; i < matrix.length; i++) {
        this.dp[i] = [];
        for (let j = 0; j < matrix[0].length; j++) {
            let val = matrix[i][j];
            let top = (i > 0) ? this.dp[i - 1][j] : 0;
            let left = (j > 0) ? this.dp[i][j - 1] : 0;
            let diag = (i > 0 && j > 0) ? this.dp[i - 1][j - 1] : 0;
            this.dp[i][j] = val + top + left - diag;
        }
    }
};

/** 
 * @param {number} row1 
 * @param {number} col1 
 * @param {number} row2 
 * @param {number} col2
 * @return {number}
 */
NumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {
    let top = (row1 > 0) ? this.dp[row1 - 1][col2] : 0;
    let left = (col1 > 0) ? this.dp[row2][col1 - 1] : 0;
    let diag = (row1 > 0 && col1 > 0) ? this.dp[row1 - 1][col1 - 1] : 0;
    return this.dp[row2][col2] - top - left + diag;
};

/** 
 * Your NumMatrix object will be instantiated and called as such:
 * var obj = new NumMatrix(matrix)
 * var param_1 = obj.sumRegion(row1,col1,row2,col2)
 */
