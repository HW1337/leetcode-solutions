/**
 * @param {number} n
 * @return {string[][]}
 */
function solveNQueens(n) {
    const board = new Array(n).fill().map(() => new Array(n).fill('.'));
    const result = [];

    const isSafe = (row, col) => {
        for (let i = 0; i < row; i++) {
            if (board[i][col] === 'Q') return false;
            const diag1 = col - (row - i);
            const diag2 = col + (row - i);
            if (diag1 >= 0 && board[i][diag1] === 'Q') return false; 
            if (diag2 < n && board[i][diag2] === 'Q') return false; 
        }
        return true;
    };

    const dfs = (row) => {
        if (row === n) {
            result.push(board.map(row => row.join('')));
            return;
        }

        for (let col = 0; col < n; col++) {
            if (isSafe(row, col)) {
                board[row][col] = 'Q';
                dfs(row + 1);
                board[row][col] = '.';
            }
        }
    };

    dfs(0);

    return result;
}
