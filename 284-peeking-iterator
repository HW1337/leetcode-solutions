/**
 * // This is the Iterator's API interface.
 * // You should not implement it, or speculate about its implementation.
 * function Iterator() {
 *    @return {number}
 *    this.next = function() { // return the next number of the iterator
 *       ...
 *    }; 
 *
 *    @return {boolean}
 *    this.hasNext = function() { // return true if it still has numbers
 *       ...
 *    };
 * };
 */

/**
 * @param {Iterator} iterator
 */
var PeekingIterator = function(iterator) {
    this.iterator = iterator;
    this.peekedValue = null;
};

/**
 * @return {number}
 */
PeekingIterator.prototype.peek = function() {
    if (!this.peekedValue) {
        this.peekedValue = this.iterator.next();
    }
    return this.peekedValue;
};

/**
 * @return {number}
 */
PeekingIterator.prototype.next = function() {
    if (this.peekedValue !== null) {
        const nextValue = this.peekedValue;
        this.peekedValue = null;
        return nextValue;
    } else {
        return this.iterator.next();
    }
};

/**
 * @return {boolean}
 */
PeekingIterator.prototype.hasNext = function() {
    return this.peekedValue !== null || this.iterator.hasNext();
};
