/**
 * @param {character[][]} board
 * @param {string[]} words
 * @return {string[]}
 */
var findWords = function(board, words) {
    const TrieNode = function() {
        this.children = {};
        this.word = null;
    };

    const buildTrie = function() {
        const root = new TrieNode();
        for (const word of words) {
            let node = root;
            for (const char of word) {
                if (!node.children[char]) {
                    node.children[char] = new TrieNode();
                }
                node = node.children[char];
            }
            node.word = word;
        }
        return root;
    };

    const dfs = function(node, i, j) {
        const char = board[i][j];
        const nextNode = node.children[char];

        if (!nextNode) return;

        if (nextNode.word) {
            result.push(nextNode.word);
            nextNode.word = null;
        }

        board[i][j] = '#';

        if (i > 0 && board[i - 1][j] !== '#') dfs(nextNode, i - 1, j);
        if (i < m - 1 && board[i + 1][j] !== '#') dfs(nextNode, i + 1, j);
        if (j > 0 && board[i][j - 1] !== '#') dfs(nextNode, i, j - 1);
        if (j < n - 1 && board[i][j + 1] !== '#') dfs(nextNode, i, j + 1);

        board[i][j] = char;
    };

    const m = board.length;
    const n = board[0].length;
    const result = [];
    const trie = buildTrie();

    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            dfs(trie, i, j);
        }
    }

    return result;
};
