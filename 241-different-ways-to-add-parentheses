/**
 * @param {string} expression
 * @return {number[]}
 */
var diffWaysToCompute = function(expression) {
    const compute = (left, right, operator) => {
        const results = [];
        for (let l of left) {
            for (let r of right) {
                if (operator === '+') {
                    results.push(l + r);
                } else if (operator === '-') {
                    results.push(l - r);
                } else if (operator === '*') {
                    results.push(l * r);
                }
            }
        }
        return results;
    };

    if (!expression.includes('+') && !expression.includes('-') && !expression.includes('*')) {
        return [parseInt(expression)];
    }

    const results = [];
    for (let i = 0; i < expression.length; i++) {
        const char = expression[i];
        if (char === '+' || char === '-' || char === '*') {
            const leftResults = diffWaysToCompute(expression.substring(0, i));
            const rightResults = diffWaysToCompute(expression.substring(i + 1));
            results.push(...compute(leftResults, rightResults, char));
        }
    }

    return results;
};
