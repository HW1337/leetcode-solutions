/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @param {number} k
 * @return {number[]}
 */
var maxNumber = function(nums1, nums2, k) {
    const maxArray = (nums, k) => {
        const stack = [];
        let popCount = nums.length - k;
        for (const num of nums) {
            while (popCount > 0 && stack.length && stack[stack.length - 1] < num) {
                stack.pop();
                popCount--;
            }
            stack.push(num);
        }
        return stack.slice(0, k);
    };
    
    const mergeArrays = (arr1, arr2) => {
        const merged = [];
        while (arr1.length || arr2.length) {
            const bigger = arr1 > arr2 ? arr1 : arr2;
            merged.push(bigger.shift());
        }
        return merged;
    };
    
    let max = [];
    for (let i = Math.max(0, k - nums2.length); i <= Math.min(k, nums1.length); i++) {
        const merged = mergeArrays(maxArray(nums1, i), maxArray(nums2, k - i));
        if (merged > max) max = merged;
    }
    
    return max;
};
