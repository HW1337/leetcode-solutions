/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
var solve = function(board) {
    const [rows, cols] = [board.length, board[0].length];

    for (let row = 0; row < rows; row++) {
        if (board[row][0] === 'O') {
            dfs(board, row, 0);
        }
        if (board[row][cols - 1] === 'O') {
            dfs(board, row, cols - 1);
        }
    }

    for (let col = 0; col < cols; col++) {
        if (board[0][col] === 'O') {
            dfs(board, 0, col);
        }
        if (board[rows - 1][col] === 'O') {
            dfs(board, rows - 1, col);
        }
    }

    for (let row = 0; row < rows; row++) {
        for (let col = 0; col < cols; col++) {
            if (board[row][col] === 'O') {
                board[row][col] = 'X';
            } else if (board[row][col] === '*') {
                board[row][col] = 'O';
            }
        }
    }
};

const dfs = (board, row, col) => {
    const [rows, cols] = [board.length, board[0].length];

    if (row < 0 || row >= rows || col < 0 || col >= cols || board[row][col] !== 'O') {
        return;
    }

    board[row][col] = '*';

    dfs(board, row + 1, col);
    dfs(board, row - 1, col);
    dfs(board, row, col + 1);
    dfs(board, row, col - 1);
};
