/**
 * @param {string} num
 * @param {number} target
 * @return {string[]}
 */
var addOperators = function(num, target) {
    const result = [];
    
    const backtrack = (index, prevOperand, currentOperand, value, expression) => {
        if (index === num.length) {
            if (value === target && currentOperand === 0) {
                result.push(expression.slice(1));
            }
            return;
        }
        
        currentOperand = currentOperand * 10 + parseInt(num[index], 10);
        const currentOperandStr = currentOperand.toString();
        
        if (currentOperand > 0) {
            backtrack(index + 1, prevOperand, currentOperand, value, expression);
        }
        
        expression += '+' + currentOperandStr;
        backtrack(index + 1, currentOperand, 0, value + currentOperand, expression);
        expression = expression.slice(0, -currentOperandStr.length - 1);
        
        if (expression.length > 0) {
            expression += '-' + currentOperandStr;
            backtrack(index + 1, -currentOperand, 0, value - currentOperand, expression);
            expression = expression.slice(0, -currentOperandStr.length - 1);
            
            expression += '*' + currentOperandStr;
            backtrack(index + 1, currentOperand * prevOperand, 0, value - prevOperand + (currentOperand * prevOperand), expression);
            expression = expression.slice(0, -currentOperandStr.length - 1);
        }
    };
    
    backtrack(0, 0, 0, 0, '');
    return result;
};
