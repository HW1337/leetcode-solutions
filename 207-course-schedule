/**
 * @param {number} numCourses
 * @param {number[][]} prerequisites
 * @return {boolean}
 */
var canFinish = function(numCourses, prerequisites) {
    const graph = buildGraph(numCourses, prerequisites);
    const visited = new Array(numCourses).fill(false);
    const recursionStack = new Array(numCourses).fill(false);

    for (let course = 0; course < numCourses; course++) {
        if (!visited[course] && isCyclic(course, graph, visited, recursionStack)) {
            return false;
        }
    }

    return true;
};

var buildGraph = (numCourses, prerequisites) => {
    const graph = new Array(numCourses).fill().map(() => []);

    for (const [src, dst] of prerequisites) {
        graph[src].push(dst);
    }

    return graph;
};

var isCyclic = (course, graph, visited, recursionStack) => {
    visited[course] = true;
    recursionStack[course] = true;

    for (const neighbor of graph[course]) {
        if (!visited[neighbor]) {
            if (isCyclic(neighbor, graph, visited, recursionStack)) {
                return true;
            }
        } else if (recursionStack[neighbor]) {
            return true;
        }
    }

    recursionStack[course] = false;
    return false;
};
