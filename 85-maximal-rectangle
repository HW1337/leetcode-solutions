/**
 * @param {character[][]} matrix
 * @return {number}
 */
var maximalRectangle = function(matrix) {
    if (matrix.length === 0) {
        return 0;
    }

    const rows = matrix.length;
    const cols = matrix[0].length;

    const heights = new Array(rows).fill(0).map(() => new Array(cols).fill(0));

    for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
            if (matrix[i][j] === "1") {
                heights[i][j] = i === 0 ? 1 : heights[i - 1][j] + 1;
            }
        }
    }

    const largestRectangleArea = function(heights) {
        const stack = [];
        let maxArea = 0;

        for (let i = 0; i <= heights.length; i++) {
            while (stack.length > 0 && (i === heights.length || heights[i] < heights[stack[stack.length - 1]])) {
                const height = heights[stack.pop()];
                const width = stack.length === 0 ? i : i - stack[stack.length - 1] - 1;
                maxArea = Math.max(maxArea, height * width);
            }

            stack.push(i);
        }

        return maxArea;
    };

    let maxRectangle = 0;
    for (let i = 0; i < rows; i++) {
        maxRectangle = Math.max(maxRectangle, largestRectangleArea(heights[i]));
    }

    return maxRectangle;
};
