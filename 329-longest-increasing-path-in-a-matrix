/**
 * @param {number[][]} matrix
 * @return {number}
 */
var longestIncreasingPath = function(matrix) {
    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];
    const m = matrix.length;
    const n = matrix[0].length;
    const cache = Array(m).fill(null).map(() => Array(n).fill(0));
    
    function dfs(i, j) {
        if (cache[i][j] !== 0) return cache[i][j];
        let max = 1;
        for (const [dx, dy] of directions) {
            const x = i + dx;
            const y = j + dy;
            if (x >= 0 && x < m && y >= 0 && y < n && matrix[x][y] > matrix[i][j]) {
                max = Math.max(max, 1 + dfs(x, y));
            }
        }
        cache[i][j] = max;
        return max;
    }
    
    let result = 0;
    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            result = Math.max(result, dfs(i, j));
        }
    }
    
    return result;
};
